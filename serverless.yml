service: crud-serverless-users

provider:
  name: aws
  runtime: nodejs14.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: arn:aws:dynamodb:us-east-1:950291568807:table/usersTable
        - Effect: Allow
          Action:
            - s3:PutObject
          Resource:
            - arn:aws:s3:::bucket-serverless-course-14052023/*
  environment:
    BUCKET: bucket-serverless-course-14052023
custom:
  tableName: 'usersTable'
  dynamodb:
  # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true  
     
#plugins:
#  - serverless-offline
#  - serverless-dynamodb-local

package:
  individually: true
  patterns:
#    - "!.dynamodb"
#    - "!.node_modules"    
    - "!*/**"
    - "!**"    
functions:
  get-users:
    handler: getUsers/handler.getUsers
    package:
      patterns:
        - "getUsers/handler.js"
    events:
      - http:
          path: users
          method: GET
  get-user:
    handler: getUsers/handler.getUser
    package:
       patterns:
         - "getUsers/handler.js"    
    events:
      - http:
          method: GET
          path: user/{userId}
          request:
            parameters:
              paths:
                userId: true
  create-users:
    handler: createUsers/handler.createUsers
    package:
      patterns:
        - "createUsers/handler.js"      
    events:
      - http:
          method: POST
          path: users
          request:
            schemas:
              application/json: ${file(schemas/user-schema.json)}         
  update-user:
    handler: updateUsers/handler.updateUsers
    package:
      patterns:
        - "updateUsers/handler.js"      
    events:
      - http:
          method: PATCH
          path: user/{userId}
          request:
            parameters:
              paths:
                userId: true
            schemas:
              application/json: ${file(schemas/user-schema.json)}         
  delete-user:
    handler: deleteUsers/handler.deleteUsers
    package:
      patterns:
        - "deleteUsers/handler.js"       
    events:
      - http:
          method: DELETE
          path: user/{userId}
          request:
            parameters:
              paths:
                userId: true
#signeURL users#
  signeURL:
    handler: signedurl/handler.signedS3URL
    package:
      patterns:
        - "signedurl/handler.js"
    events:
      - http:
          path: signedurl
          method: get
          request:
            parameters:
              querystrings:
                filename: true
#thumbGenerator users#
  thumbGenerator:
    handler: thumbnail/handler.thumbnailGenerator
    layers:
      - { Ref: BaseLambdaLayer }
    package:
      patterns:
        - "thumbnail/handler.js"
#        - "node_modules/**"
    events:
      - s3:
          bucket: bucket-serverless-course-14052023
          event: s3:ObjectCreated:*
          existing: true
          rules:
            - prefix: upload/    
layers:
  base:
    name: "prd-dependencies"
    compatibleRuntimes:
      - "nodejs14.x"
    package:
      artifact: nodejs.zip
resources:
  Resources:
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: pk
            AttributeType: S
        KeySchema:
          -
            AttributeName: pk
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}
    S3Bucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false      
#        AccessControl: PublicRead
        BucketName: bucket-serverless-course-14052023
    SampleBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref S3Bucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Action:
                - 's3:GetObject'
              Effect: Allow
              Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref S3Bucket
                  - /*
              Principal: '*'                